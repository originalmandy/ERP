/*
NOMBRE BASE DE DATOS NUEVA: ERP  --ESTO SE PODRA CAMBIAR DESDE LA APLICACION DE INSTALACION DE BASE DE DATOS Y COMPAÑIAS
COMPANIA DE PRUEBA: TEST --ESTO SE PODRA CAMBIAR DESDE LA APLICACION DE INSTALACION DE BASE DE DATOS Y COMPAÑIAS
*/

USE ERP
GO

PRINT 'CREANDO COMPAÑIA TEST...';
GO

IF EXISTS (SELECT LOGINNAME FROM sys.syslogins WHERE name = N'TEST')
	DROP USER TEST
GO

CREATE USER TEST WITHOUT LOGIN ;
GO

IF EXISTS (SELECT schema_id FROM sys.schemas WHERE name = N'TEST')
		DROP SCHEMA TEST
GO

CREATE SCHEMA TEST AUTHORIZATION TEST;
GO

PRINT 'COMPAÑIA TEST CREADA CORRECTAMENTE!!!';
GO

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING OFF
GO

--******************* TABLA CUENTA_CONTABLE ***************************
CREATE TABLE TEST.CUENTA_CONTABLE
(
	CUENTA_CONTABLE VARCHAR(20) NOT NULL,
	DESCRIPCION VARCHAR(100) NOT NULL,
	TIPO VARCHAR(1) NOT NULL, --B = BALANCE, C = CUENTA DE ORDEN, E = ESTADO DE RESULTADO
	TIPO_DETALLADO VARCHAR(1) NOT NULL, --A = ACTIVO, P = PASIVO, T = PATRIMONIO
	SALDO_NORMAL VARCHAR(1) NOT NULL, --D = DEUDOR, A = ACREEDOR
	ACEPTA_DATOS VARCHAR(1) NOT NULL, --S = SI, N = NO
	CONSOLIDA VARCHAR(1) NOT NULL, --S = SI, N = NO
	USO_RESTRINGIDO VARCHAR(1) NOT NULL, --S = SI, N = NO
	
	PRIMARY KEY (CUENTA_CONTABLE),

	/**CAMPOS DE AUDITORIA**/
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	/**FIN DE CAMPOS DE AUDITORIA**/
)
GO

CREATE TRIGGER TRIGGER_AUDIT_CUENTA_CONTABLE ON TEST.CUENTA_CONTABLE
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.CUENTA_CONTABLE T INNER JOIN INSERTED I ON T.CUENTA_CONTABLE = I.CUENTA_CONTABLE;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.CUENTA_CONTABLE T INNER JOIN DELETED D ON T.CUENTA_CONTABLE = D.CUENTA_CONTABLE;
END
GO

PRINT 'TABLA CUENTA_CONTABLE CREADA!!!';


--******************* TABLA CENTRO_COSTO ***************************
CREATE TABLE TEST.CENTRO_COSTO
(
	CENTRO_COSTO VARCHAR(10) NOT NULL,
	DESCRIPCION VARCHAR(100) NOT NULL,
	ACEPTADATOS VARCHAR(1) NOT NULL DEFAULT 'N',
	TIPO VARCHAR(1) NOT NULL DEFAULT 'A', --G = GASTO, I = INGRESO, A = AMBOS

	PRIMARY KEY (CENTRO_COSTO),

	/**CAMPOS DE AUDITORIA**/
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	/**FIN DE CAMPOS DE AUDITORIA**/
)
GO

CREATE TRIGGER TRIGGER_AUDIT_CENTRO_COSTO ON TEST.CENTRO_COSTO
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.CENTRO_COSTO T INNER JOIN INSERTED I ON T.CENTRO_COSTO = I.CENTRO_COSTO;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.CENTRO_COSTO T INNER JOIN DELETED D ON T.CENTRO_COSTO = D.CENTRO_COSTO;
END
GO

PRINT 'TABLA CENTRO_COSTO CREADA!!!';

--******************* TABLA CENTRO_CUENTA ***************************
CREATE TABLE TEST.CENTRO_CUENTA
(
	CENTRO_COSTO VARCHAR(10) NOT NULL,
	CUENTA_CONTABLE VARCHAR(20) NOT NULL,
	CENTRO_COSTO_CONSOLIDA VARCHAR(10) NULL, --CENTRO DE COSTO DE LA EMPRESA CONSOLIDADORA (DEBE CREARSE PREVIAMENTE EN LA EMPRESA CONSOLIDADORA)
	CUENTA_CONTABLE_CONSOLIDA VARCHAR(20) NULL, --CUENTA CONTABLE DE LA EMPRESA CONSOLIDADORA (DEBE CREARSE PREVIAMENTE EN LA EMPRESA CONSOLIDADORA)
	ACTIVO VARCHAR(1) NOT NULL DEFAULT 'N', --S = SI, N = NO

	PRIMARY KEY (CENTRO_COSTO),

	/**CAMPOS DE AUDITORIA**/
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	/**FIN DE CAMPOS DE AUDITORIA**/
)
GO

CREATE TRIGGER TRIGGER_AUDIT_CENTRO_CUENTA ON TEST.CENTRO_CUENTA
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.CENTRO_CUENTA T INNER JOIN INSERTED I ON T.CENTRO_COSTO = I.CENTRO_COSTO AND T.CUENTA_CONTABLE = I.CUENTA_CONTABLE;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.CENTRO_CUENTA T INNER JOIN DELETED D ON T.CENTRO_COSTO = D.CENTRO_COSTO AND T.CUENTA_CONTABLE = D.CUENTA_CONTABLE;
END
GO

PRINT 'TABLA CENTRO_COSTO CREADA!!!';

--******************* TABLA DIARIO ***************************
CREATE TABLE TEST.DIARIO
(
	ASIENTO VARCHAR(20) NOT NULL,
	LINEA INT NOT NULL,
	CUENTA_CONTABLE VARCHAR(20) NOT NULL,
	FECHA DATE NOT NULL,
	FECHA_HORA DATETIME NOT NULL,
	FUENTE VARCHAR(50) NOT NULL,
	REFERENCIA VARCHAR(100) NOT NULL,
	DEBITO DECIMAL(28,8) DEFAULT 0,
	CREDITO DECIMAL (28,8) DEFAULT 0,
	DEBITO_DOLAR DECIMAL(28,8) DEFAULT 0,
	CREDITO_DOLAR DECIMAL (28,8) DEFAULT 0,
	TIPO_CAMBIO DECIMAL (28,8) DEFAULT 0,
	NOTAS VARCHAR(MAX) NULL,

	PRIMARY KEY (ASIENTO, LINEA),
	FOREIGN KEY (CUENTA_CONTABLE) REFERENCES TEST.CUENTA_CONTABLE (CUENTA_CONTABLE),

	/**CAMPOS DE AUDITORIA**/
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	/**FIN DE CAMPOS DE AUDITORIA**/
)
GO

CREATE TRIGGER TRIGGER_AUDIT_DIARIO ON TEST.DIARIO
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.DIARIO T INNER JOIN INSERTED I ON T.ASIENTO = I.ASIENTO AND T.LINEA = I.LINEA;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.DIARIO T INNER JOIN DELETED D ON T.ASIENTO = D.ASIENTO AND T.LINEA = D.LINEA;
END
GO

PRINT 'TABLA DIARIO CREADA!!!';

--******************* TABLA MAYOR ***************************
CREATE TABLE TEST.MAYOR
(
	ASIENTO VARCHAR(20) NOT NULL,
	LINEA VARCHAR(20) NOT NULL,
	CUENTA_CONTABLE VARCHAR(20) NOT NULL,
	FECHA DATE,
	FECHA_HORA DATETIME,
	FUENTE VARCHAR(50) NOT NULL,
	REFERENCIA VARCHAR(100) NOT NULL,
	DEBITO DECIMAL(28,8) DEFAULT 0,
	CREDITO DECIMAL (28,8) DEFAULT 0,
	DEBITO_DOLAR DECIMAL(28,8) DEFAULT 0,
	CREDITO_DOLAR DECIMAL (28,8) DEFAULT 0,
	TIPO_CAMBIO DECIMAL (28,8) DEFAULT 0,
	ORIGEN VARCHAR(5) NOT NULL,
	FECHA_HORA_MAYORIZADO DATETIME,
	MAYORIZADO_POR VARCHAR(20),
	NOTAS VARCHAR(MAX) NULL,

	PRIMARY KEY (ASIENTO, LINEA),
	FOREIGN KEY (CUENTA_CONTABLE) REFERENCES TEST.CUENTA_CONTABLE (CUENTA_CONTABLE),

	/**CAMPOS DE AUDITORIA**/
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	/**FIN DE CAMPOS DE AUDITORIA**/
)
GO

CREATE TRIGGER TRIGGER_AUDIT_MAYOR ON TEST.MAYOR
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.MAYOR T INNER JOIN INSERTED I ON T.ASIENTO = I.ASIENTO AND T.LINEA = I.LINEA;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.MAYOR T INNER JOIN DELETED D ON T.ASIENTO = D.ASIENTO AND T.LINEA = D.LINEA;
END
GO

PRINT 'TABLA MAYOR CREADA!!!';

--******************* TABLA UNIDAD_MEDIDA ***************************
PRINT 'CREANDO TABLA UNIDAD_MEDIDA...';
GO

CREATE TABLE TEST.UNIDAD_MEDIDA(
	UNIDAD_MEDIDA INT NOT NULL,
	DESCRIPCION VARCHAR(20) NOT NULL UNIQUE,
	
	PRIMARY KEY (UNIDAD_MEDIDA),

	/**CAMPOS DE AUDITORIA**/
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	/**FIN DE CAMPOS DE AUDITORIA**/
)
GO

CREATE TRIGGER TRIGGER_AUDIT_UNIDAD_MEDIDA ON TEST.UNIDAD_MEDIDA
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.UNIDAD_MEDIDA T INNER JOIN INSERTED I ON T.UNIDAD_MEDIDA = I.UNIDAD_MEDIDA;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.UNIDAD_MEDIDA T INNER JOIN DELETED D ON T.UNIDAD_MEDIDA = D.UNIDAD_MEDIDA;
END
GO

PRINT 'TABLA UNIDAD_MEDIDA CREADA!!!';

--******************* TABLA ARTICULO ***************************
PRINT 'CREANDO TABLA ARTICULO...';
GO

CREATE TABLE TEST.ARTICULO(
	ARTICULO VARCHAR(5) NOT NULL,
	DESCRIPCION VARCHAR(200) NOT NULL UNIQUE,
	FOTO IMAGE NULL,
	COSTO_ULTIMO DECIMAL(28, 8),
	COSTO_PROMEDIO DECIMAL(28, 8),
	UNIDAD_MEDIDA_COMPRA INT,
	UNIDAD_MEDIDA_VENTA INT,
	CONVERSION_UM_COMPRA_VENTA DECIMAL(28,8),

	PRIMARY KEY (ARTICULO),
	FOREIGN KEY (UNIDAD_MEDIDA_COMPRA) REFERENCES TEST.UNIDAD_MEDIDA (UNIDAD_MEDIDA),
	FOREIGN KEY (UNIDAD_MEDIDA_VENTA) REFERENCES TEST.UNIDAD_MEDIDA (UNIDAD_MEDIDA),

	/**CAMPOS DE AUDITORIA**/
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	/**FIN DE CAMPOS DE AUDITORIA**/
)
GO

CREATE TRIGGER TRIGGER_AUDIT_ARTICULO ON TEST.ARTICULO
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.ARTICULO T INNER JOIN INSERTED I ON T.ARTICULO = I.ARTICULO;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.ARTICULO T INNER JOIN DELETED D ON T.ARTICULO = D.ARTICULO;
END
GO

PRINT 'TABLA ARTICULO CREADA!!!';

--******************* TABLA ARTICULO_CODIGO_BARRAS ***************************
PRINT 'CREANDO TABLA ARTICULO_CODIGO_BARRAS...';
GO

CREATE TABLE TEST.ARTICULO_CODIGO_BARRAS(
	ARTICULO VARCHAR(5) NOT NULL,
	CODIGO_BARRAS VARCHAR(100) NOT NULL UNIQUE,
	
	PRIMARY KEY (ARTICULO, CODIGO_BARRAS),
	FOREIGN KEY (ARTICULO) REFERENCES TEST.ARTICULO(ARTICULO),

	/**CAMPOS DE AUDITORIA**/
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	/**FIN DE CAMPOS DE AUDITORIA**/
)
GO

CREATE TRIGGER TRIGGER_AUDIT_ARTICULO_CODIGO_BARRAS ON TEST.ARTICULO_CODIGO_BARRAS
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.ARTICULO_CODIGO_BARRAS T INNER JOIN INSERTED I ON T.ARTICULO = I.ARTICULO AND T.CODIGO_BARRAS = I.CODIGO_BARRAS;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.ARTICULO_CODIGO_BARRAS T INNER JOIN DELETED D ON T.ARTICULO = D.ARTICULO AND T.CODIGO_BARRAS = D.CODIGO_BARRAS;
END
GO

PRINT 'TABLA ARTICULO_CODIGO_BARRAS CREADA!!!';

--******************* TABLA ARTICULO_PRECIO ***************************
PRINT 'CREANDO TABLA ARTICULO_PRECIO...';
GO

CREATE TABLE TEST.ARTICULO_PRECIO(
	ARTICULO VARCHAR(5) NOT NULL,
	NIVEL_PRECIO INT NOT NULL DEFAULT 1,
	PRECIO DECIMAL(28,8) NOT NULL,
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (ARTICULO, NIVEL_PRECIO),
	FOREIGN KEY (ARTICULO) REFERENCES TEST.ARTICULO (ARTICULO) ON UPDATE CASCADE
)
GO

CREATE TRIGGER TRIGGER_AUDIT_ARTICULO_PRECIO ON TEST.ARTICULO_PRECIO
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.ARTICULO_PRECIO T INNER JOIN INSERTED I ON T.ARTICULO = I.ARTICULO AND T.NIVEL_PRECIO = I.NIVEL_PRECIO;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.ARTICULO_PRECIO T INNER JOIN DELETED D ON T.ARTICULO = D.ARTICULO AND T.NIVEL_PRECIO = D.NIVEL_PRECIO;
END
GO

PRINT 'TABLA ARTICULO_PRECIO CREADA!!!';


--******************* TABLA IMPUESTO ***************************
PRINT 'CREANDO TABLA IMPUESTO...';
GO

CREATE TABLE TEST.IMPUESTO(
	IMPUESTO VARCHAR(20) NOT NULL,
	DESCRIPCION VARCHAR(200) NOT NULL,
	VALOR DECIMAL(28, 8),

	PRIMARY KEY (IMPUESTO),
	
	/**CAMPOS DE AUDITORIA**/
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	/**FIN DE CAMPOS DE AUDITORIA**/
)
GO

CREATE TRIGGER TRIGGER_AUDIT_IMPUESTO ON TEST.IMPUESTO
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.IMPUESTO T INNER JOIN INSERTED I ON T.IMPUESTO = I.IMPUESTO;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.IMPUESTO T INNER JOIN DELETED D ON T.IMPUESTO = D.IMPUESTO;
END
GO

PRINT 'TABLA IMPUESTO CREADA!!!';

--******************* TABLA ARTICULO_IMPUESTO ***************************
PRINT 'CREANDO TABLA ARTICULO_IMPUESTO...';
GO

CREATE TABLE TEST.ARTICULO_IMPUESTO(
	ARTICULO VARCHAR(5) NOT NULL,
	IMPUESTO VARCHAR(20) NOT NULL,

	PRIMARY KEY (ARTICULO, IMPUESTO),
	FOREIGN KEY (ARTICULO) REFERENCES TEST.ARTICULO(ARTICULO),
	FOREIGN KEY (IMPUESTO) REFERENCES TEST.IMPUESTO(IMPUESTO),

	/**CAMPOS DE AUDITORIA**/
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	/**FIN DE CAMPOS DE AUDITORIA**/
)
GO

CREATE TRIGGER TRIGGER_AUDIT_ARTICULO_IMPUESTO ON TEST.ARTICULO_IMPUESTO
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.ARTICULO_IMPUESTO T INNER JOIN INSERTED I ON T.ARTICULO = I.ARTICULO AND T.IMPUESTO = I.IMPUESTO;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.ARTICULO_IMPUESTO T INNER JOIN DELETED D ON T.ARTICULO = D.ARTICULO AND T.IMPUESTO = D.IMPUESTO;
END
GO

PRINT 'TABLA ARTICULO CREADA!!!';

--******************* TABLA VENDEDOR ***************************
PRINT 'CREANDO TABLA VENDEDOR...';
GO

CREATE TABLE TEST.VENDEDOR(
	VENDEDOR INT IDENTITY(1,1),
	NOMBRE VARCHAR(200) NOT NULL,
	CEDULA VARCHAR(20) NULL,
	DIRECCION VARCHAR(200) NULL,
	TELEFONO VARCHAR(100) NULL,
	FOTO IMAGE NULL,
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (VENDEDOR)
)
GO

CREATE TRIGGER TRIGGER_AUDIT_VENDEDOR ON TEST.VENDEDOR
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.VENDEDOR T INNER JOIN INSERTED I ON T.VENDEDOR = I.VENDEDOR;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.VENDEDOR T INNER JOIN DELETED D ON T.VENDEDOR = D.VENDEDOR;
END
GO

PRINT 'TABLA VENDEDOR CREADA!!!';

--******************* TABLA PROVEEDOR ***************************
PRINT 'CREANDO TABLA PROVEEDOR...';
GO

CREATE TABLE TEST.PROVEEDOR(
	PROVEEDOR INT NOT NULL,
	NOMBRE VARCHAR(200) NOT NULL,
	CONTACTO VARCHAR(100) NULL,
	DIRECCION VARCHAR(200) NULL,
	TELEFONO VARCHAR(100) NULL,
	FOTO IMAGE NULL,
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (PROVEEDOR)
)
GO

CREATE TRIGGER TRIGGER_AUDIT_PROVEEDOR ON TEST.PROVEEDOR
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.PROVEEDOR T INNER JOIN INSERTED I ON T.PROVEEDOR = I.PROVEEDOR;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.PROVEEDOR T INNER JOIN DELETED D ON T.PROVEEDOR = D.PROVEEDOR;
END
GO

PRINT 'TABLA PROVEEDOR CREADA!!!';


--******************* TABLA ARTICULO_PROVEEDOR ***************************
PRINT 'CREANDO TABLA ARTICULO_PROVEEDOR...';
GO

CREATE TABLE TEST.ARTICULO_PROVEEDOR(
	ARTICULO VARCHAR(5) NOT NULL,
	PROVEEDOR INT NOT NULL,
	PRECIO DECIMAL(28,8),
	DESCUENTO DECIMAL(28,8),
	BONIFICACION DECIMAL(28,8),
	BONIFICACION_POR_CADA DECIMAL(28,8),
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (ARTICULO, PROVEEDOR),
	FOREIGN KEY (ARTICULO) REFERENCES TEST.ARTICULO (ARTICULO) ON UPDATE CASCADE,
	FOREIGN KEY (PROVEEDOR) REFERENCES TEST.PROVEEDOR (PROVEEDOR) ON UPDATE CASCADE
)
GO

CREATE TRIGGER TRIGGER_AUDIT_ARTICULO_PROVEEDOR ON TEST.ARTICULO_PROVEEDOR
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.ARTICULO_PROVEEDOR T INNER JOIN INSERTED I ON T.ARTICULO = I.ARTICULO AND T.PROVEEDOR = I.PROVEEDOR;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.ARTICULO_PROVEEDOR T INNER JOIN DELETED D ON T.ARTICULO = D.ARTICULO AND T.PROVEEDOR = D.PROVEEDOR;
END
GO
PRINT 'TABLA ARTICULO_PROVEEDOR CREADA!!!';


--******************* TABLA CLASIFICACION ***************************
PRINT 'CREANDO TABLA CLASIFICACION...';
GO

CREATE TABLE TEST.CLASIFICACION(
	CLASIFICACION INT NOT NULL,
	NOMBRE VARCHAR(20) COLLATE Latin1_General_CI_AI, 
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (CLASIFICACION)
)
GO

CREATE TRIGGER TRIGGER_AUDIT_CLASIFICACION ON TEST.CLASIFICACION
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.CLASIFICACION T INNER JOIN INSERTED I ON T.CLASIFICACION = I.CLASIFICACION;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.CLASIFICACION T INNER JOIN DELETED D ON T.CLASIFICACION = D.CLASIFICACION;
END
GO

PRINT 'TABLA CLASIFICACION CREADA!!!';


--******************* TABLA ARTICULO_CLASIFICACION ***************************
PRINT 'CREANDO TABLA ARTICULO_CLASIFICACION...';
GO

CREATE TABLE TEST.ARTICULO_CLASIFICACION(
	ARTICULO VARCHAR(5) NOT NULL,
	CLASIFICACION INT,
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY(ARTICULO, CLASIFICACION),
	FOREIGN KEY (ARTICULO) REFERENCES TEST.ARTICULO (ARTICULO) ON UPDATE CASCADE,
	FOREIGN KEY (CLASIFICACION) REFERENCES TEST.CLASIFICACION (CLASIFICACION) ON UPDATE CASCADE
)
GO

CREATE TRIGGER TRIGGER_AUDIT_ARTICULO_CLASIFICACION ON TEST.ARTICULO_CLASIFICACION
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.ARTICULO_CLASIFICACION T INNER JOIN INSERTED I ON T.ARTICULO = I.ARTICULO AND T.CLASIFICACION = I.CLASIFICACION;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.ARTICULO_CLASIFICACION T INNER JOIN DELETED D ON T.ARTICULO = D.ARTICULO AND T.CLASIFICACION = D.CLASIFICACION;
END
GO

PRINT 'TABLA ARTICULO_CLASIFICACION CREADA!!!';

--******************* TABLA CONDICION_PAGO ***************************
PRINT 'CREANDO TABLA CONDICION_PAGO...';
GO

CREATE TABLE TEST.CONDICION_PAGO(
	CONDICION_PAGO INT NOT NULL,
	DESCRIPCION VARCHAR(20) NOT NULL,
	DIAS INT,
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY(CONDICION_PAGO)
)
GO

CREATE TRIGGER TRIGGER_AUDIT_CONDICION_PAGO ON TEST.CONDICION_PAGO
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.CONDICION_PAGO T INNER JOIN INSERTED I ON T.CONDICION_PAGO = I.CONDICION_PAGO;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.CONDICION_PAGO T INNER JOIN DELETED D ON T.CONDICION_PAGO = D.CONDICION_PAGO;
END
GO

PRINT 'TABLA CONDICION_PAGO CREADA!!!';

--******************* TABLA ORDEN_COMPRA ***************************
PRINT 'CREANDO TABLA ORDEN_COMPRA...';
GO

CREATE TABLE TEST.ORDEN_COMPRA(
	ORDEN_COMPRA INT NOT NULL,
	PROVEEDOR INT NOT NULL,
	CONDICION_PAGO INT NOT NULL,
	FECHA_ORDEN DATETIME NOT NULL,
	PORCENTAJE_DESCUENTO DECIMAL(28,8) DEFAULT 0.00,
	MONTO_DESCUENTO DECIMAL(28,8) DEFAULT 0.00,
	IMPUESTO DECIMAL(28,8) DEFAULT 0.00,
	SUBTOTAL DECIMAL(28,8) DEFAULT 0.00, --TOTAL SIN DESCUENTO NI IMPUESTO
	TOTAL DECIMAL(28,8) DEFAULT 0.00,
	ESTADO VARCHAR(1) DEFAULT 'E', --ESTADOS E = ELABORADA, I = IMPRESA, R = RECIBIDA
	OBSERVACIONES VARCHAR(200),
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY(ORDEN_COMPRA),
	FOREIGN KEY (PROVEEDOR) REFERENCES TEST.PROVEEDOR (PROVEEDOR) ON UPDATE CASCADE,
	FOREIGN KEY (CONDICION_PAGO) REFERENCES TEST.CONDICION_PAGO (CONDICION_PAGO) ON UPDATE CASCADE
)
GO

CREATE TRIGGER TRIGGER_AUDIT_ORDEN_COMPRA ON TEST.ORDEN_COMPRA
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.ORDEN_COMPRA T INNER JOIN INSERTED I ON T.ORDEN_COMPRA = I.ORDEN_COMPRA;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.ORDEN_COMPRA T INNER JOIN DELETED D ON T.ORDEN_COMPRA = D.ORDEN_COMPRA;
END
GO

PRINT 'TABLA ORDEN_COMPRA CREADA!!!';

--******************* TABLA ORDEN_COMPRA_LINEA ***************************
PRINT 'CREANDO TABLA ORDEN_COMPRA_LINEA...';
GO

CREATE TABLE TEST.ORDEN_COMPRA_LINEA(
	ORDEN_COMPRA INT NOT NULL,
	LINEA INT NOT NULL,
	ARTICULO VARCHAR(5) NOT NULL,
	DESCRIPCION VARCHAR(200) NOT NULL,
	UNIDAD_MEDIDA_COMPRA INT,
	UNIDAD_MEDIDA_VENTA INT, --UNIDAD DE DETALLE
	CONVERSION_UM_COMPRA_VENTA DECIMAL(28, 8),
	CANTIDAD DECIMAL(28, 8),
	CANTIDAD_DETALLE DECIMAL(28, 8),
	BONIFICACION DECIMAL(28, 8),
	BONIFICACION_DETALLE DECIMAL(28, 8),
	COSTO_COMPRA DECIMAL(28, 8),
	COSTO_DETALLE DECIMAL(28, 8),
	SUBTOTAL DECIMAL(28, 8),
	PORCENTAJE_DESCUENTO DECIMAL(28, 8),
	MONTO_DESCUENTO DECIMAL(28, 8),
	IMPUESTO DECIMAL(28, 8),
	MONTO_IMPUESTO DECIMAL(28, 8),
	TOTAL DECIMAL(28, 8),
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY(ORDEN_COMPRA, ARTICULO),
	FOREIGN KEY (ORDEN_COMPRA) REFERENCES TEST.ORDEN_COMPRA (ORDEN_COMPRA) ON UPDATE CASCADE,
	FOREIGN KEY (ARTICULO) REFERENCES TEST.ARTICULO (ARTICULO) ON UPDATE CASCADE
)
GO

CREATE TRIGGER TRIGGER_AUDIT_ORDEN_COMPRA_LINEA ON TEST.ORDEN_COMPRA_LINEA
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.ORDEN_COMPRA_LINEA T INNER JOIN INSERTED I ON T.ORDEN_COMPRA = I.ORDEN_COMPRA AND T.ARTICULO = I.ARTICULO;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.ORDEN_COMPRA_LINEA T INNER JOIN DELETED D ON T.ORDEN_COMPRA = D.ORDEN_COMPRA AND T.ARTICULO = D.ARTICULO;
END
GO

PRINT 'TABLA ORDEN_COMPRA_LINEA CREADA!!!';

--******************* TABLA CLIENTE ***************************
CREATE TABLE TEST.CLIENTE
(
	CLIENTE VARCHAR(20) NOT NULL,
	NOMBRE VARCHAR(100) NOT NULL,
	BENEFICIARIO VARCHAR(100) COLLATE Latin1_General_CI_AI,
	SALDO DECIMAL(28,8),
	LIMITE_CREDITO DECIMAL(28,8),
	EXCEDER_LIMITE VARCHAR(1) NOT NULL,
	CONDICION_PAGO INT,
	ES_CORPORACION VARCHAR(1) NOT NULL,
	CLI_CORPORAC_ASOC VARCHAR(20) COLLATE Latin1_General_CI_AI, --CODIGO DE LA TEST A LA QUE PERTENECE
	ACTIVO VARCHAR(1) NOT NULL,
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY(CLIENTE),
	FOREIGN KEY (CONDICION_PAGO) REFERENCES TEST.CONDICION_PAGO (CONDICION_PAGO) ON UPDATE CASCADE
)
GO

CREATE TRIGGER TRIGGER_AUDIT_CLIENTE ON TEST.CLIENTE
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.CLIENTE T INNER JOIN INSERTED I ON T.CLIENTE= I.CLIENTE;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.CLIENTE T INNER JOIN DELETED D ON T.CLIENTE = D.CLIENTE;
END
GO

PRINT 'TABLA CLIENTE CREADA!!!';

--******************* TABLA PAQUETE_DESCUENTO ***************************
PRINT 'CREANDO TABLA PAQUETE_DESCUENTO...';
GO

CREATE TABLE TEST.PAQUETE_DESCUENTO(
	PAQUETE_DESCUENTO INT NOT NULL,
	DESCRIPCION VARCHAR(200) NOT NULL,
	ACTIVO VARCHAR(1) COLLATE Latin1_General_CI_AI,
	FECHA_HORA_INICIO DATETIME NOT NULL,
	FECHA_HORA_FIN DATETIME NOT NULL,
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (PAQUETE_DESCUENTO)
)
GO

CREATE TRIGGER TRIGGER_AUDIT_PAQUETE_DESCUENTO ON TEST.PAQUETE_DESCUENTO
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.PAQUETE_DESCUENTO T INNER JOIN INSERTED I ON T.PAQUETE_DESCUENTO = I.PAQUETE_DESCUENTO;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.PAQUETE_DESCUENTO T INNER JOIN DELETED D ON T.PAQUETE_DESCUENTO = D.PAQUETE_DESCUENTO;
END
GO

PRINT 'TABLA PAQUETE_DESCUENTO CREADA!!!';

--******************* TABLA REGLA_DESCUENTO ***************************
CREATE TABLE TEST.REGLA_DESCUENTO
(
	REGLA_DESCUENTO INT NOT NULL,
	ACTIVO VARCHAR(1) NOT NULL,
	TIPO_DESCUENTO VARCHAR(1) NOT NULL,
	DESCUENTO DECIMAL(28,8),
	CANTIDAD_COMPRA DECIMAL(28,8),
	CANTIDAD_FACTURAR DECIMAL(28,8),
	ARTICULO_PATRON VARCHAR(20) COLLATE Latin1_General_CI_AI,
	ARTICULO VARCHAR(5) NOT NULL,
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (REGLA_DESCUENTO),
	FOREIGN KEY (ARTICULO) REFERENCES TEST.ARTICULO (ARTICULO) ON UPDATE CASCADE
)
GO

CREATE TRIGGER TRIGGER_AUDIT_REGLA_DESCUENTO ON TEST.REGLA_DESCUENTO
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.REGLA_DESCUENTO T INNER JOIN INSERTED I ON T.REGLA_DESCUENTO = I.REGLA_DESCUENTO;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.REGLA_DESCUENTO T INNER JOIN DELETED D ON T.REGLA_DESCUENTO = D.REGLA_DESCUENTO;
END
GO

PRINT 'TABLA REGLA_DESCUENTO CREADA!!!';


--******************* TABLA PAQUETE_DESC_REGLA_DESC ***************************
CREATE TABLE TEST.PAQUETE_DESC_REGLA_DESC
(
	PAQUETE_DESCUENTO INT NOT NULL,
	REGLA_DESCUENTO INT NOT NULL,
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY(PAQUETE_DESCUENTO, REGLA_DESCUENTO),
	FOREIGN KEY (PAQUETE_DESCUENTO) REFERENCES TEST.PAQUETE_DESCUENTO (PAQUETE_DESCUENTO) ON UPDATE CASCADE,
	FOREIGN KEY (REGLA_DESCUENTO) REFERENCES TEST.REGLA_DESCUENTO (REGLA_DESCUENTO) ON UPDATE CASCADE
)
GO

CREATE TRIGGER TRIGGER_AUDIT_PAQUETE_DESC_REGLA_DESC ON TEST.PAQUETE_DESC_REGLA_DESC
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.PAQUETE_DESC_REGLA_DESC T INNER JOIN INSERTED I ON T.PAQUETE_DESCUENTO = I.PAQUETE_DESCUENTO AND T.REGLA_DESCUENTO = I.REGLA_DESCUENTO;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.PAQUETE_DESC_REGLA_DESC T INNER JOIN DELETED D ON T.PAQUETE_DESCUENTO = D.PAQUETE_DESCUENTO AND T.REGLA_DESCUENTO = D.REGLA_DESCUENTO;
END
GO

PRINT 'TABLA PAQUETE_DESC_REGLA_DESC CREADA!!!';

--******************* TABLA TIPO_CAMBIO ***************************
CREATE TABLE TEST.TIPO_CAMBIO
(
	TIPO_CAMBIO VARCHAR(4)NOT NULL,
	FECHA DATETIME NOT NULL,
	MONTO DECIMAL(28,8),
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY(TIPO_CAMBIO, FECHA)
)
GO

CREATE TRIGGER TRIGGER_AUDIT_TIPO_CAMBIO ON TEST.TIPO_CAMBIO
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.TIPO_CAMBIO T INNER JOIN INSERTED I ON T.TIPO_CAMBIO = I.TIPO_CAMBIO;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.TIPO_CAMBIO T INNER JOIN DELETED D ON T.TIPO_CAMBIO = D.TIPO_CAMBIO;
END
GO

PRINT 'TABLA TIPO_CAMBIO CREADA!!!';

--******************* TABLA BODEGA ***************************
CREATE TABLE TEST.BODEGA
(
	BODEGA INT NOT NULL,
	DESCRIPCION VARCHAR(50) NOT NULL,
	TIPO VARCHAR(1) NOT NULL, --A = ALMACEN, V = VENTA, C = CONSUMO
	ACTIVO VARCHAR(1) NOT NULL,
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (BODEGA)
)
GO

CREATE TRIGGER TRIGGER_AUDIT_BODEGA ON TEST.BODEGA
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.BODEGA T INNER JOIN INSERTED I ON T.BODEGA = I.BODEGA;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.BODEGA T INNER JOIN DELETED D ON T.BODEGA = D.BODEGA;
END
GO

PRINT 'TABLA BODEGA CREADA!!!';

--******************* TABLA EXISTENCIA_BODEGA ***************************
CREATE TABLE TEST.EXISTENCIA_BODEGA
(
	BODEGA INT NOT NULL,
	ARTICULO VARCHAR(5) NOT NULL,
	FECHA_VENCIMIENTO DATETIME,
	EXISTENCIAS DECIMAL(28,8),
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (BODEGA, ARTICULO, FECHA_VENCIMIENTO),
	FOREIGN KEY (BODEGA) REFERENCES TEST.BODEGA (BODEGA) ON UPDATE CASCADE,
	FOREIGN KEY (ARTICULO) REFERENCES TEST.ARTICULO (ARTICULO) ON UPDATE CASCADE
)
GO

CREATE TRIGGER TRIGGER_AUDIT_EXISTENCIA_BODEGA ON TEST.EXISTENCIA_BODEGA
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.EXISTENCIA_BODEGA T INNER JOIN INSERTED I ON T.BODEGA = I.BODEGA AND T.ARTICULO = I.ARTICULO AND T.FECHA_VENCIMIENTO = I.FECHA_VENCIMIENTO;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.EXISTENCIA_BODEGA T INNER JOIN DELETED D ON T.BODEGA = D.BODEGA AND T.ARTICULO = D.ARTICULO AND T.FECHA_VENCIMIENTO = D.FECHA_VENCIMIENTO;
END
GO

PRINT 'TABLA EXISTENCIA_BODEGA CREADA!!!';

--******************* TABLA CAJA ***************************
CREATE TABLE TEST.CAJA
(
	CAJA INT NOT NULL,
	DESCRIPCION VARCHAR(50) NOT NULL,
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (CAJA)
)
GO

CREATE TRIGGER TRIGGER_AUDIT_CAJA ON TEST.CAJA
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.CAJA T INNER JOIN INSERTED I ON T.CAJA = I.CAJA;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.CAJA T INNER JOIN DELETED D ON T.CAJA = D.CAJA;
END
GO

PRINT 'TABLA CAJA CREADA!!!';

--******************* TABLA APERTURA_CAJA ***************************
CREATE TABLE TEST.APERTURA_CAJA
(
	BODEGA INT NOT NULL,
	CAJA INT NOT NULL,
	USUARIO VARCHAR(20) NOT NULL,
	APERTURA INT NOT NULL,
	FECHA_HORA_APERTURA DATETIME,
	FECHA_HORA_CIERRE DATETIME,
	ESTADO VARCHAR(1) NOT NULL,
	SALDO_INICIAL_EFECTIVO DECIMAL(28, 8) NULL DEFAULT ((0)),
	SALDO_FINAL_EFECTIVO DECIMAL(28, 8) NULL DEFAULT ((0)),
	SALDO_TARJETA DECIMAL(28, 8) NULL DEFAULT ((0)),
	SALDO_CREDITO DECIMAL(28, 8) NULL DEFAULT ((0)),
	SALDO_ABONO_CREDITO DECIMAL(28, 8) NULL DEFAULT ((0)),
	SALDO_CHEQUE DECIMAL(28, 8) NULL DEFAULT ((0)),
	SALDO_REGALIA DECIMAL(28, 8) NULL DEFAULT ((0)),
	SALDO_RETIRO DECIMAL(28, 8) NULL DEFAULT ((0)),
	SALDO_BONO DECIMAL(28, 8) NULL DEFAULT ((0)),
	TIPO_CAMBIO DECIMAL(28, 8) NULL,
	TOTAL_CLIENTES INT NULL DEFAULT ((0)),
	RECIBIDO_EFECTIVO DECIMAL(28, 8) NULL DEFAULT ((0)),
	RECIBIDO_TARJETA DECIMAL(28, 8) NULL DEFAULT ((0)),
	RECIBIDO_CREDITO DECIMAL(28, 8) NULL DEFAULT ((0)),
	RECIBIDO_ABONO_CREDITO DECIMAL(28, 8) NULL DEFAULT ((0)),
	RECIBIDO_CHEQUE DECIMAL(28, 8) NULL DEFAULT ((0)),
	RECIBIDO_REGALIA DECIMAL(28, 8) NULL DEFAULT ((0)),
	RECIBIDO_RETIRO DECIMAL(28, 8) NULL DEFAULT ((0)),
	RECIBIDO_BONO DECIMAL(28, 8) NULL DEFAULT ((0)),
	TOTAL_VENTAS DECIMAL(28, 8) NULL DEFAULT ((0)),
	NOTAS VARCHAR(500)  NULL,
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (BODEGA, CAJA, USUARIO, APERTURA),
	FOREIGN KEY (BODEGA) REFERENCES TEST.BODEGA (BODEGA) ON UPDATE CASCADE,
	FOREIGN KEY (CAJA) REFERENCES TEST.CAJA (CAJA) ON UPDATE CASCADE,
	FOREIGN KEY (USUARIO) REFERENCES CONFIG.USUARIO (USUARIO) ON UPDATE CASCADE
)
GO

CREATE TRIGGER TRIGGER_AUDIT_APERTURA_CAJA ON TEST.APERTURA_CAJA
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.APERTURA_CAJA T INNER JOIN INSERTED I ON T.BODEGA = I.BODEGA AND T.CAJA = I.CAJA AND T.USUARIO = I.USUARIO AND T.APERTURA = I.APERTURA;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.APERTURA_CAJA T INNER JOIN DELETED D ON T.BODEGA = D.BODEGA AND T.CAJA = D.CAJA AND T.USUARIO = D.USUARIO AND T.APERTURA = D.APERTURA;
END
GO

PRINT 'TABLA APERTURA_CAJA CREADA!!!';

--******************* TABLA CONSECUTIVO ***************************
CREATE TABLE TEST.CONSECUTIVO
(
	CONSECUTIVO VARCHAR(20) NOT NULL,
	DESCRIPCION VARCHAR(100) NOT NULL,
	MODULO VARCHAR(5) NOT NULL,
	ACTIVO VARCHAR(1) NOT NULL,
	LONGITUD INT,
	MASCARA VARCHAR(20) NOT NULL,
	VALOR_INICIAL VARCHAR(20) NOT NULL,
	ULTIMO_VALOR VARCHAR(20) NOT NULL,
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (CONSECUTIVO),
	FOREIGN KEY (MODULO) REFERENCES CONFIG.MODULO (MODULO) ON UPDATE CASCADE
)
GO

CREATE TRIGGER TRIGGER_AUDIT_CONSECUTIVO ON TEST.CONSECUTIVO
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.CONSECUTIVO T INNER JOIN INSERTED I ON T.CONSECUTIVO = I.CONSECUTIVO;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.CONSECUTIVO T INNER JOIN DELETED D ON T.CONSECUTIVO = D.CONSECUTIVO;
END
GO

PRINT 'TABLA CONSECUTIVO CREADA!!!';

--******************* TABLA RETIRO_CAJA ***************************
CREATE TABLE TEST.RETIRO_CAJA
(
	RETIRO_CAJA INT NOT NULL,
	BODEGA INT NOT NULL,
	CAJA INT NOT NULL,
	USUARIO VARCHAR(20) NOT NULL,
	APERTURA INT NOT NULL,
	MONTO DECIMAL(28,8),
	SUPERVISOR VARCHAR(20) NOT NULL,
	MOTIVO VARCHAR(500)  NULL,
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (RETIRO_CAJA, BODEGA, CAJA, USUARIO, APERTURA),
	FOREIGN KEY (BODEGA, CAJA, USUARIO, APERTURA) REFERENCES TEST.APERTURA_CAJA (BODEGA, CAJA, USUARIO, APERTURA) ON UPDATE CASCADE
)
GO

CREATE TRIGGER TRIGGER_AUDIT_RETIRO_CAJA ON TEST.RETIRO_CAJA
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.RETIRO_CAJA T INNER JOIN INSERTED I ON T.RETIRO_CAJA = I.RETIRO_CAJA AND T.BODEGA = I.BODEGA AND T.CAJA = I.CAJA AND T.USUARIO = I.USUARIO AND T.APERTURA = I.APERTURA;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.RETIRO_CAJA T INNER JOIN DELETED D ON T.RETIRO_CAJA = D.RETIRO_CAJA AND T.BODEGA = D.BODEGA AND T.CAJA = D.CAJA AND T.USUARIO = D.USUARIO AND T.APERTURA = D.APERTURA;
END
GO

PRINT 'TABLA RETIRO_CAJA CREADA!!!';

--******************* TABLA MONEDA ***************************
CREATE TABLE TEST.MONEDA
(
	MONEDA VARCHAR(4) NOT NULL,
	DESCRIPCION VARCHAR(100) NOT NULL,
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (MONEDA)
)
GO

CREATE TRIGGER TRIGGER_AUDIT_MONEDA ON TEST.MONEDA
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.MONEDA T INNER JOIN INSERTED I ON T.MONEDA = I.MONEDA;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.MONEDA T INNER JOIN DELETED D ON T.MONEDA= D.MONEDA;
END
GO

PRINT 'TABLA MONEDA CREADA!!!';

--******************* TABLA MONEDA_DENOMINACION ***************************
CREATE TABLE TEST.MONEDA_DENOMINACION
(
	MONEDA VARCHAR(4) NOT NULL,
	TIPO VARCHAR(1) NOT NULL, -- 0 = MONEDA, 1 = BILLETE
	DENOMINACION DECIMAL(28, 8) NOT NULL,
	DESCRIPCION VARCHAR(100) NOT NULL,
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (MONEDA, TIPO, DENOMINACION),
	FOREIGN KEY (MONEDA) REFERENCES TEST.MONEDA (MONEDA) ON UPDATE CASCADE
)
GO

CREATE TRIGGER TRIGGER_AUDIT_MONEDA_DENOMINACION ON TEST.MONEDA_DENOMINACION
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.MONEDA_DENOMINACION T INNER JOIN INSERTED I ON T.MONEDA = I.MONEDA AND T.TIPO = I.TIPO AND T.DENOMINACION = I.DENOMINACION;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.MONEDA_DENOMINACION T INNER JOIN DELETED D ON T.MONEDA = D.MONEDA AND T.TIPO = D.TIPO AND T.DENOMINACION = D.DENOMINACION;
END
GO

PRINT 'TABLA MONEDA_DENOMINACION CREADA!!!';

--******************* TABLA DETALLE_MONEDA_CIERRE ***************************
CREATE TABLE TEST.DETALLE_MONEDA_CIERRE
(
	BODEGA INT NOT NULL,
	CAJA INT NOT NULL,
	USUARIO VARCHAR(20) NOT NULL,
	APERTURA INT NOT NULL,
	MONEDA VARCHAR(4) NOT NULL,
	TIPO VARCHAR(1) NOT NULL,
	DENOMINACION DECIMAL(28, 8) NOT NULL,
	CANTIDAD DECIMAL(28, 8) NULL,
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (BODEGA, CAJA, USUARIO, APERTURA, MONEDA, TIPO, DENOMINACION),
	FOREIGN KEY (BODEGA, CAJA, USUARIO, APERTURA) REFERENCES TEST.APERTURA_CAJA (BODEGA, CAJA, USUARIO, APERTURA) ON UPDATE CASCADE,
	FOREIGN KEY (MONEDA, TIPO, DENOMINACION) REFERENCES TEST.MONEDA_DENOMINACION (MONEDA, TIPO, DENOMINACION) ON UPDATE CASCADE
)
GO

CREATE TRIGGER TRIGGER_AUDIT_DETALLE_MONEDA_CIERRE ON TEST.DETALLE_MONEDA_CIERRE
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.DETALLE_MONEDA_CIERRE T INNER JOIN INSERTED I ON T.BODEGA = I.BODEGA AND T.CAJA = I.CAJA AND T.USUARIO = I.USUARIO AND T.APERTURA = I.APERTURA AND T.MONEDA = I.MONEDA AND T.TIPO = I.TIPO AND T.DENOMINACION = I.DENOMINACION;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.DETALLE_MONEDA_CIERRE T INNER JOIN DELETED D ON T.BODEGA = D.BODEGA AND T.CAJA = D.CAJA AND T.USUARIO = D.USUARIO AND T.APERTURA = D.APERTURA AND T.MONEDA = D.MONEDA AND T.TIPO = D.TIPO AND T.DENOMINACION = D.DENOMINACION;
END
GO

PRINT 'TABLA DETALLE_MONEDA_CIERRE CREADA!!!';

--******************* TABLA FACTURA_DESHECHA ***************************
CREATE TABLE TEST.FACTURA_DESHECHA
(
	FACTURA_DESHECHA_ID INT IDENTITY(1,1),
	BODEGA INT NOT NULL,
	CONSECUTIVO_ANTERIOR VARCHAR(20) NOT NULL,
	CAJA INT NOT NULL,
	USUARIO VARCHAR(20) NOT NULL,
	APERTURA INT NOT NULL,
	CLIENTE VARCHAR(20) NOT NULL,
	LINEA INT NOT NULL,
	ARTICULO VARCHAR(20) NOT NULL,
	CANTIDAD DECIMAL(28, 8),
	PRECIO DECIMAL(28, 8),
	IMPUESTO_LINEA DECIMAL(28, 8),
	DESCUENTO_LINEA DECIMAL(28, 8),
	TOTAL_LINEA DECIMAL(28, 8),
	COSTO DECIMAL(28, 8),
	FECHA DATETIME NOT NULL,
	TIPO_CAMBIO DECIMAL(28, 8) NOT NULL,
	NIVEL_PRECIO INT NULL,
	ESTADO VARCHAR(2) NULL,
	NOMBRE_CLIENTE VARCHAR(100) NULL,
	SUPERVISOR VARCHAR(10) NULL,
	ANULADA VARCHAR(1) NULL,
	FECHA_ANULADA DATETIME NULL,
	USUARIO_ANULA DATETIME NULL,
	MOTIVO_ANULA VARCHAR(500),
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME())
)
GO

CREATE TRIGGER TRIGGER_AUDIT_FACTURA_DESHECHA ON TEST.FACTURA_DESHECHA
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.FACTURA_DESHECHA T INNER JOIN INSERTED I ON T.FACTURA_DESHECHA_ID = I.FACTURA_DESHECHA_ID;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.FACTURA_DESHECHA T INNER JOIN DELETED D ON T.FACTURA_DESHECHA_ID = D.FACTURA_DESHECHA_ID;
END
GO


PRINT 'TABLA FACTURA_DESHECHA CREADA!!!';

--******************* TABLA FACTURA ***************************
CREATE TABLE TEST.FACTURA
(
	BODEGA VARCHAR(4) NOT NULL,
	CAJA VARCHAR(10) NOT NULL,
	USUARIO VARCHAR(10) NOT NULL,
	APERTURA INT NOT NULL,
	FACTURA VARCHAR(20) NOT NULL DEFAULT 'X',
	CLIENTE VARCHAR(20) NOT NULL,
	FECHA DATETIME DEFAULT (getdate()),
	TIPO_CAMBIO DECIMAL(28, 8) NOT NULL,
	NIVEL_PRECIO VARCHAR(12) COLLATE Latin1_General_CI_AI,
	ESTADO VARCHAR(2) COLLATE Latin1_General_CI_AI,
	NOMBRE_CLIENTE VARCHAR(100) COLLATE Latin1_General_CI_AI,
	ES_FACTURA VARCHAR(1) COLLATE Latin1_General_CI_AI,
	TRANSACCION INT,
	COMENTARIO_CXC VARCHAR(50) NOT NULL,
	TOTAL_FACTURA DECIMAL(28, 8),
	IMPUESTO DECIMAL(28, 8),
	DESCUENTO DECIMAL(28, 8),
	ANULADA VARCHAR(1) DEFAULT 'N',
	FECHA_ANULADA DATETIME NULL,
	USUARIO_ANULA VARCHAR(20) NULL,
	CARGADO_CONTA VARCHAR(1) DEFAULT 'N',
	CARGADO_CXC VARCHAR(1) DEFAULT 'N',
	CONDICION_PAGO INT NULL,
	DOCUMENTO_CXC INT NULL,
	MONTO_ANTICIPO DECIMAL(28, 8),
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (BODEGA, CAJA, USUARIO, APERTURA, FACTURA)
)
GO

CREATE TRIGGER TRIGGER_AUDIT_FACTURA ON TEST.FACTURA
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.FACTURA T INNER JOIN INSERTED I ON T.BODEGA = I.BODEGA AND T.CAJA = I.CAJA AND T.USUARIO = I.USUARIO AND T.APERTURA = I.APERTURA AND T.FACTURA = I.FACTURA;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.FACTURA T INNER JOIN DELETED D ON T.BODEGA = D.BODEGA AND T.CAJA = D.CAJA AND T.USUARIO = D.USUARIO AND T.APERTURA = D.APERTURA AND T.FACTURA = D.FACTURA;
END
GO

PRINT 'TABLA FACTURA CREADA!!!';

--******************* TABLA FACTURA_LINEA ***************************
CREATE TABLE TEST.FACTURA_LINEA
(
	BODEGA VARCHAR(4) NOT NULL,
	CAJA VARCHAR(10) NOT NULL,
	USUARIO VARCHAR(10) NOT NULL,
	APERTURA INT NOT NULL,
	FACTURA VARCHAR(20) NOT NULL DEFAULT 'X',
	LINEA INT NOT NULL,
	ARTICULO VARCHAR(20) NOT NULL,
	FECHA_VENCIMIENTO DATETIME,
	CANTIDAD DECIMAL(28, 8),
	PRECIO_UNITARIO DECIMAL(28, 8),
	IMPUESTO_LINEA DECIMAL(28, 8),
	DESCUENTO_LINEA DECIMAL(28, 8),
	TOTAL_LINEA DECIMAL(28, 8),
	COSTO DECIMAL(28, 8),
	FECHA DATETIME DEFAULT (getdate()),
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (BODEGA, CAJA, USUARIO, APERTURA, FACTURA, LINEA),
	FOREIGN KEY(BODEGA, CAJA, USUARIO, APERTURA, FACTURA) REFERENCES TEST.FACTURA (BODEGA, CAJA, USUARIO, APERTURA, FACTURA) ON UPDATE CASCADE
)
GO

CREATE TRIGGER TRIGGER_AUDIT_FACTURA_LINEA ON TEST.FACTURA_LINEA
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.FACTURA_LINEA T INNER JOIN INSERTED I ON T.BODEGA = I.BODEGA AND T.CAJA = I.CAJA AND T.USUARIO = I.USUARIO AND T.APERTURA = I.APERTURA AND T.FACTURA = I.FACTURA AND T.LINEA = I.LINEA;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.FACTURA_LINEA T INNER JOIN DELETED D ON T.BODEGA = D.BODEGA AND T.CAJA = D.CAJA AND T.USUARIO = D.USUARIO AND T.APERTURA = D.APERTURA AND T.FACTURA = D.FACTURA AND T.LINEA = D.LINEA;
END
GO


PRINT 'TABLA FACTURA_LINEA CREADA!!!';

--******************* TABLA FACTURA_FORMA_PAGO ***************************
CREATE TABLE TEST.FACTURA_FORMA_PAGO
(
	BODEGA VARCHAR(4) NOT NULL,
	CAJA VARCHAR(10) NOT NULL,
	USUARIO VARCHAR(10) NOT NULL,
	APERTURA INT NOT NULL,
	FACTURA VARCHAR(20) NOT NULL DEFAULT 'X',
	LINEA INT NOT NULL,
	FORMA_PAGO VARCHAR(20) NOT NULL,
	MONTO DECIMAL(28, 8) NOT NULL,
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (BODEGA, CAJA, USUARIO, APERTURA, FACTURA, LINEA),
	FOREIGN KEY (BODEGA, CAJA, USUARIO, APERTURA, FACTURA) REFERENCES TEST.FACTURA (BODEGA, CAJA, USUARIO, APERTURA, FACTURA) ON UPDATE CASCADE
)
GO

CREATE TRIGGER TRIGGER_AUDIT_FACTURA_FORMA_PAGO ON TEST.FACTURA_FORMA_PAGO
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.FACTURA_FORMA_PAGO T INNER JOIN INSERTED I ON T.BODEGA = I.BODEGA AND T.CAJA = I.CAJA AND T.USUARIO = I.USUARIO AND T.APERTURA = I.APERTURA AND T.FACTURA = I.FACTURA AND T.LINEA = I.LINEA;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.FACTURA_FORMA_PAGO T INNER JOIN DELETED D ON T.BODEGA = D.BODEGA AND T.CAJA = D.CAJA AND T.USUARIO = D.USUARIO AND T.APERTURA = D.APERTURA AND T.FACTURA = D.FACTURA AND T.LINEA = D.LINEA;
END
GO

PRINT 'TABLA FACTURA_FORMA_PAGO CREADA!!!';

--******************* TABLA DOCUMENTO_INV ***************************
CREATE TABLE TEST.DOCUMENTO_INV
(
	DOCUMENTO_INV INT NOT NULL,
	REFERENCIA VARCHAR(200) NOT NULL,
	FECHA DATETIME,
	APROBADO VARCHAR(1) DEFAULT 'N',
	USUARIO_APRUEBA VARCHAR(20) NULL,
	FECHA_APROBADA DATETIME NULL, 
	TIPO_CAMBIO DECIMAL(28, 8),
	BODEGA_ORIGEN INT NOT NULL,
	BODEGA_DESTINO INT NULL,
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (DOCUMENTO_INV),
	FOREIGN KEY (BODEGA_ORIGEN) REFERENCES TEST.BODEGA (BODEGA) ON UPDATE CASCADE
)
GO

CREATE TRIGGER TRIGGER_AUDIT_DOCUMENTO_INV ON TEST.DOCUMENTO_INV
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.DOCUMENTO_INV T INNER JOIN INSERTED I ON T.DOCUMENTO_INV = I.DOCUMENTO_INV;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.DOCUMENTO_INV T INNER JOIN DELETED D ON T.DOCUMENTO_INV = D.DOCUMENTO_INV;
END
GO

PRINT 'TABLA DOCUMENTO_INV CREADA!!!';

--******************* TABLA DOCUMENTO_INV_LINEA ***************************
CREATE TABLE TEST.DOCUMENTO_INV_LINEA
(
	DOCUMENTO_INV INT NOT NULL,
	LINEA INT NOT NULL,
	TIPO VARCHAR(5) NOT NULL, -- CO = COMPRA, T = TRASLADO, V = VENTA, F = INVENTARIO_FISICO, M = INVENTARIO_MISCELANEO
	ARTICULO VARCHAR(5) COLLATE Latin1_General_CI_AI,
	FECHA_VENCIMIENTO DATETIME NULL,
	CANTIDAD DECIMAL(28,8),
	COSTO_TOTAL DECIMAL(28,8),
	PRECIO_TOTAL DECIMAL(28,8),
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (DOCUMENTO_INV, LINEA),
	FOREIGN KEY (DOCUMENTO_INV) REFERENCES TEST.DOCUMENTO_INV (DOCUMENTO_INV) ON UPDATE CASCADE,
	FOREIGN KEY (ARTICULO) REFERENCES TEST.ARTICULO (ARTICULO) ON UPDATE CASCADE
)
GO

CREATE TRIGGER TRIGGER_AUDIT_DOCUMENTO_INV_LINEA ON TEST.DOCUMENTO_INV_LINEA
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.DOCUMENTO_INV_LINEA T INNER JOIN INSERTED I ON T.DOCUMENTO_INV = I.DOCUMENTO_INV AND T.LINEA = I.LINEA;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.DOCUMENTO_INV_LINEA T INNER JOIN DELETED D ON T.DOCUMENTO_INV = D.DOCUMENTO_INV AND T.LINEA = D.LINEA;
END
GO

PRINT 'TABLA DOCUMENTO_INV_LINEA CREADA!!!';

--******************* TABLA DOCUMENTO_CXC ***************************
CREATE TABLE TEST.DOCUMENTO_CXC
(
	DOCUMENTO VARCHAR(20) NOT NULL,
	TIPO VARCHAR(5) NOT NULL, --FAC = FACTURA, REC = RECIBO
	APLICACION VARCHAR(200) NOT NULL,
	FECHA_DOCUMENTO DATETIME,
	FECHA_VENCE DATETIME,
	MONTO DECIMAL(28,8),
	SALDO DECIMAL(28,8),
	TIPO_CAMBIO DECIMAL(28,8),
	CARGADO_DE_POS VARCHAR(1) NOT NULL,
	APROBADO VARCHAR(1) NOT NULL,
	USUARIO_APROBACION VARCHAR(20) NOT NULL,
	FECHA_APROBACION DATETIME,
	ASIENTO VARCHAR(20) NOT NULL,
	NOTAS VARCHAR(200) NOT NULL,
	CONDICION_PAGO INT,
	VENDEDOR VARCHAR(20) NOT NULL,
	CLIENTE VARCHAR(20) NOT NULL,
	ANULADO VARCHAR(1) NOT NULL,
	FECHA_ANULADO DATETIME,
	USUARIO_ANULA VARCHAR(20) NOT NULL,
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (DOCUMENTO, TIPO)
)
GO

CREATE TRIGGER TRIGGER_AUDIT_DOCUMENTO_CXC ON TEST.DOCUMENTO_CXC
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.DOCUMENTO_CXC T INNER JOIN INSERTED I ON T.DOCUMENTO = I.DOCUMENTO AND T.TIPO = I.TIPO;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.DOCUMENTO_CXC T INNER JOIN DELETED D ON T.DOCUMENTO = D.DOCUMENTO AND T.TIPO = D.TIPO;
END
GO

PRINT 'TABLA DOCUMENTO_CXC CREADA!!!';

--******************* TABLA TRANSACCION ***************************
CREATE TABLE TEST.TRANSACCION
(
	TRANSACCION INT NOT NULL,
	CONSECUTIVO VARCHAR(20) NULL,
	APLICACION VARCHAR(50) NULL,
	REFERENCIA VARCHAR(100) NULL,
	ASIENTO INT NULL,
	USUARIO VARCHAR(20) NULL,
	FECHA DATETIME,
	MODULO VARCHAR(5) NOT NULL,
	APROBADO VARCHAR(1) DEFAULT 'N',
	USUARIO_APRUEBA VARCHAR(20) NULL,
	FECHA_APROBADA DATETIME NULL, 
	TIPO_CAMBIO DECIMAL(28, 8),
	BODEGA_ORIGEN INT NOT NULL,
	BODEGA_DESTINO INT NULL,
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (TRANSACCION),
	FOREIGN KEY (BODEGA_ORIGEN) REFERENCES TEST.BODEGA (BODEGA) ON UPDATE CASCADE
)
GO

CREATE TRIGGER TRIGGER_AUDIT_TRANSACCION ON TEST.TRANSACCION
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.TRANSACCION T INNER JOIN INSERTED I ON T.TRANSACCION = I.TRANSACCION;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.TRANSACCION T INNER JOIN DELETED D ON T.TRANSACCION = D.TRANSACCION;
END
GO

PRINT 'TABLA TRANSACCION CREADA!!!';

--******************* TABLA TRANSACCION_LINEA ***************************
CREATE TABLE TEST.TRANSACCION_LINEA
(
	TRANSACCION INT NOT NULL,
	LINEA INT NOT NULL,
	TIPO VARCHAR(5) NOT NULL, -- CO = COMPRA, T = TRASLADO, V = VENTA, F = INVENTARIO_FISICO, M = INVENTARIO_MISCELANEO
	NATURALEZA VARCHAR(1) NOT NULL, -- E = ENTRADA, S = SALIDA
	ARTICULO VARCHAR(5) COLLATE Latin1_General_CI_AI,
	FECHA_VENCIMIENTO DATETIME NULL,
	CANTIDAD DECIMAL(28,8),
	COSTO_TOTAL DECIMAL(28,8),
	PRECIO_TOTAL DECIMAL(28,8),
	CONTABILIZADA VARCHAR(1) DEFAULT('N'),
	CUENTA_CONTABLE VARCHAR(20) NULL,
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	PRIMARY KEY (TRANSACCION, LINEA),
	FOREIGN KEY (TRANSACCION) REFERENCES TEST.TRANSACCION (TRANSACCION) ON UPDATE CASCADE,
	FOREIGN KEY (ARTICULO) REFERENCES TEST.ARTICULO (ARTICULO) ON UPDATE CASCADE
)
GO

CREATE TRIGGER TRIGGER_AUDIT_TRANSACCION_LINEA ON TEST.TRANSACCION_LINEA
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM TEST.TRANSACCION_LINEA T INNER JOIN INSERTED I ON T.TRANSACCION = I.TRANSACCION AND T.LINEA = I.LINEA;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM TEST.TRANSACCION_LINEA T INNER JOIN DELETED D ON T.TRANSACCION = D.TRANSACCION AND T.LINEA = D.LINEA;
END
GO

PRINT 'TABLA TRANSACCION_LINEA CREADA!!!';
GO

/****************** FUNCIONES VARIAS ************************************************/
--OBTENER EL TIPO DE CAMBIO ACTUAL O EL ULTIMO DISPONIBLE
CREATE FUNCTION TEST.GET_TIPO_CAMBIO(@TCNAME VARCHAR(4)) RETURNS DECIMAL(28,8)
AS BEGIN
	DECLARE @TC DECIMAL(28,8)
	
	SET @TC = (SELECT MONTO FROM TEST.TIPO_CAMBIO WHERE TIPO_CAMBIO=@TCNAME AND DAY(FECHA)=DAY(GETDATE()) AND MONTH(FECHA)=MONTH(GETDATE()) AND YEAR(FECHA)=YEAR(GETDATE()))

	IF @TC IS NULL
	BEGIN
		SET @TC =(SELECT TOP 1 MONTO FROM TEST.TIPO_CAMBIO WHERE TIPO_CAMBIO=@TCNAME ORDER BY FECHA DESC)
	END

	IF @TC IS NULL
	BEGIN
		SET @TC = 0
	END
	RETURN @TC
END
GO

--OBTENER EL PRECIO DE UN ARTICULO EN UN NIVEL DE PRECIO
/*UNDER DEVELOP ;P
CREATE FUNCTION TEST.GET_PRECIO(@ARTICULO VARCHAR(20), @NIVEL_PRECIO INT) 
RETURNS DECIMAL(28,8)
AS BEGIN
	DECLARE @PRECIO DECIMAL(28,8), @IMPUESTO DECIMAL(28,8)
	DECLARE @DESCUENTO DECIMAL(28,8), @TIPO_DESCUENTO VARCHAR(2)
	DECLARE @CANTIDAD_COMPRA DECIMAL(28,8), @CANTIDAD_FACTURAR DECIMAL(28,8)
	DECLARE @PRECIO_V DECIMAL(28,8)

SELECT @PRECIO = ISNULL(LEFT(AP.PRECIO, CHARINDEX('.', AP.PRECIO) + 5), 0)
			FROM TEST.ARTICULO A
			INNER JOIN TEST.ARTICULO_PRECIO AP
			ON A.ARTICULO = AP.ARTICULO
			LEFT JOIN TEST.ARTIC
			WHERE (A.ARTICULO = @ARTICULO OR A.COD = @ARTICULO) 
			AND AP.NIVEL_PRECIO = @NIVEL_PRECIO

SELECT @DESCUENTO = RD.DESCUENTO, @TIPO_DESCUENTO = RD.TIPO_DESCUENTO,
			@CANTIDAD_COMPRA = RD.CANTIDAD_COMPRA, @CANTIDAD_FACTURAR = RD.CANTIDAD_FACTURAR
			FROM TEST.PAQUETE_DESCUENTO PD 
			INNER JOIN TEST.PAQUETE_DESC_REGLA_DESC PDRD 
			ON PD.PAQUETE_DESCUENTO = PDRD.PAQUETE_DESCUENTO  
			INNER JOIN TEST.REGLA_DESCUENTO RD 
			ON PDRD.REGLA_DESCUENTO = RD.REGLA_DESCUENTO 
			INNER JOIN TEST.ARTICULO A 
			ON A.ARTICULO = RD.ARTICULO
			WHERE (RD.ARTICULO = @ARTICULO OR A.COD_BARRAS = @ARTICULO) AND PD.ACTIVO = 'S'  
			  AND CONVERT(char(19),GETDATE(),120) >= CONVERT(char(19), PD.FECHA_HORA_INICIO,120)  
			  AND CONVERT(char(19),GETDATE(),120) <= CONVERT(char(19), PD.FECHA_HORA_FIN,120)
			
SET @IMPUESTO =  (SELECT ISNULL(IMPUESTO, 0)
			   FROM TEST.ARTICULO
			   WHERE (ARTICULO=@ARTICULO OR COD_BARRAS =@ARTICULO)  )

SET @PRECIO_V = @PRECIO + (@PRECIO * ISNULL(@IMPUESTO, 0)/100) - ((@PRECIO + (@PRECIO * ISNULL(@IMPUESTO, 0)/100)) * ISNULL(@DESCUENTO,0)/100)

RETURN ISNULL(TEST.REDONDEAR(@PRECIO_V), 0)
END
GO

CREATE PROCEDURE TEST.SIGUIENTE_CONSECUTIVO(@CONSECUTIVO VARCHAR(20)) 
AS BEGIN
	DECLARE @SIGUIENTE_CONSEC VARCHAR (20)

	SET @SIGUIENTE_CONSEC = (SELECT SUBSTRING(ULTIMO_VALOR, 0, LEN(REPLACE(MASCARA, '9', '')) + 1) + 
		CAST(CAST(SUBSTRING(ULTIMO_VALOR, LEN(REPLACE(MASCARA, '9', '')) + 1, LEN(MASCARA)) AS INT) + 1 AS VARCHAR)
		FROM TEST.CONSECUTIVO WHERE CONSECUTIVO=@CONSECUTIVO)

	UPDATE TEST.CONSECUTIVO 
		SET ULTIMO_VALOR = @SIGUIENTE_CONSEC
		WHERE CONSECUTIVO=@CONSECUTIVO
	
	SELECT @SIGUIENTE_CONSEC
END
GO

CREATE PROCEDURE TEST.SEND_PRELECTURA_APERTURA_CAJA(@BODEGA INT, @CAJA INT, @APERTURA INT)
AS BEGIN
	DECLARE @EFECTIVO DECIMAL(28,8), @TARJETA DECIMAL(28,8), @CREDITO DECIMAL(28,8), @ANTICIPO DECIMAL(28,8)
	DECLARE @CHEQUE DECIMAL(28,8), @REGALIA DECIMAL(28,8), @BONO DECIMAL(28,8), @RETIRO DECIMAL(28,8)
	DECLARE @TOTAL_CLIENTES INT

	SELECT @EFECTIVO = ISNULL((CASE FORMA_PAGO WHEN 'EFECTIVO' THEN FP.MONTO WHEN 'CAMBIO' THEN FP.MONTO * -1 ELSE 0 END),0), 
		@TARJETA = ISNULL((CASE FORMA_PAGO WHEN 'TARJETA' THEN FP.MONTO ELSE 0 END),0),
		@CREDITO = ISNULL((CASE FORMA_PAGO WHEN 'CREDITO' THEN FP.MONTO ELSE 0 END),0),
		@CHEQUE = ISNULL((CASE FORMA_PAGO WHEN 'CHEQUE' THEN FP.MONTO ELSE 0 END),0),
		@REGALIA = ISNULL((CASE FORMA_PAGO WHEN 'REGALIA' THEN FP.MONTO ELSE 0 END),0),
		@BONO = ISNULL((CASE FORMA_PAGO WHEN 'BONO' THEN FP.MONTO ELSE 0 END),0)
	FROM TEST.FACTURA_FORMA_PAGO F
	WHERE F.BODEGA = @BODEGA 
	AND F.CAJA = @CAJA 
	AND F.APERTURA = @APERTURA
	AND F.FACTURA NOT IN (SELECT FACTURA FROM POS_FACTURA_ANULADA)

	SET @ANTICIPO = (@CREDITO -	
								(
									SELECT SUM( ISNULL((CASE FORMA_PAGO 
														WHEN 'EFECTIVO' THEN FP.MONTO
														WHEN 'CAMBIO' THEN FP.MONTO * -1 
														WHEN 'TARJETA' THEN FP.MONTO
														WHEN 'CHEQUE' THEN FP.MONTO
														WHEN 'REGALIA' THEN FP.MONTO
														WHEN 'BONO' THEN FP.MONTO 
														ELSE 0 END),0))
									FROM FACTURA_FORMA_PAGO
									WHERE BODEGA = @BODEGA
									AND FORMA_PAGO <> 'CREDITO'
									AND CAJA = @CAJA
									AND APERTURA = @APERTURA
									AND FACTURA NOT IN (SELECT FACTURA FROM POS_FACTURA_ANULADA)
									AND FACTURA IN(SELECT FACTURA
										FROM FACTURA_FORMA_PAGO
										WHERE BODEGA = @BODEGA
										AND FORMA_PAGO = 'CREDITO'
										AND CAJA = @CAJA
										AND APERTURA = @APERTURA)
									)
								)

		SET @RETIRO = (SELECT SUM(ISNULL(MONTO,0)) FROM TEST.RETIRO_CAJA 
						WHERE BODEGA = @BODEGA
						AND CAJA = @CAJA
						AND APERTURA = @APERTURA)

		SET @TOTAL_CLIENTES = (SELECT COUNT(FACTURA) FROM FACTURA WHERE BODEGA = @BODEGA AND CAJA=@CAJA AND APERTURA = @APERTURA)

	UPDATE TEST.APERTURA_CAJA SET SALDO_FINAL_EFECTIVO = @EFECTIVO - @RETIRO, SALDO_TARJETA = @TARJETA,
		SALDO_CREDITO = @CREDITO, SALDO_ABONO_CREDITO = @ANTICIPO, SALDO_CHEQUE = @CHEQUE,
		SALDO_REGALIA = @REGALIA, SALDO_RETIRO = @RETIRO, TOTAL_CLIENTES = @TOTAL_CLIENTES,
		SALDO_BONO = @BONO,
		TOTAL_VENTAS = @EFECTIVO + @TARJETA + @CREDITO + @CHEQUE + @RETIRO + @BONO
	WHERE BODEGA = @BODEGA AND CAJA = @CAJA AND APERTURA = @APERTURA
END
GO

CREATE PROCEDURE TEST.ABRIR_CAJA(@BODEGA INT, @CAJA INT, @TCNAME VARCHAR(10), @CONSECUTIVO VARCHAR(20)) 
AS BEGIN
	DECLARE @TC DECIMAL(28,8)
	DECLARE @APERTURA INT
	
	SET @TC = TEST.GET_TIPO_CAMBIO(@TCNAME)
	SET @APERTURA = (SELECT ISNULL(MAX(APERTURA),0)+1 FROM TEST.APERTURA_CAJA WHERE BODEGA = @BODEGA AND CAJA = @CAJA)

	INSERT INTO TEST.APERTURA_CAJA (BODEGA, CAJA, USUARIO, APERTURA, FECHA_HORA_APERTURA, TIPO_CAMBIO,ESTADO) 
	VALUES(@BODEGA, @CAJA, SUSER_SNAME(), @APERTURA, GETDATE(), @TC, 'A')

	SELECT @APERTURA
END

--CREAR TABLA ARTICULO_BODEGA_CUENTA_CONTABLE
*/