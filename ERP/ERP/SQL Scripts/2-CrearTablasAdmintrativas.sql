/*
NOMBRE BASE DE DATOS NUEVA: ERP  --ESTO SE PODRA CAMBIAR DESDE LA APLICACION DE INSTALACION DE BASE DE DATOS Y COMPAÑIAS
COMPANIA DE TABLAS ADMINISTRATIVAS: CONFIG --ESTE NOMBRE DE COMPAÑIA NO ES MODIFICABLE. DEBE LLAMARSE ASI PARA TODAS LAS BASES DE DATOS DONDE SE INSTALE EL SISTEMA
*/

USE ERP
GO

PRINT 'CREANDO COMPAÑIA DE CONFIGURACION...';
GO

IF EXISTS (SELECT LOGINNAME FROM sys.syslogins WHERE name = N'CONFIG')
	DROP USER CONFIG
GO

CREATE USER CONFIG WITHOUT LOGIN ;
GO

IF EXISTS (SELECT schema_id FROM sys.schemas WHERE name = N'CONFIG')
		DROP SCHEMA CONFIG
GO

CREATE SCHEMA CONFIG AUTHORIZATION CONFIG;
GO

PRINT 'COMPAÑIA CONFIG CREADA CORRECTAMENTE!!!';
GO

--******************* TABLA SERVIDOR ***************************
PRINT 'CREANDO TABLA SERVIDOR...';
GO

CREATE TABLE CONFIG.SERVIDOR(
	EMPRESA VARCHAR(6) NOT NULL, --CODIGO EMPRESA (CODIGO DE CLIENTE QUE ADQUIRIO EL ERP)
	LICENCIA VARCHAR(MAX) NULL, 
	/*
		LA LICENCIA SE GENERA ONLINE PARA PODER INSTALAR EL ERP EN UN SERVIDOR NUEVO.
		SI SE VA A REALIZAR UPGRADE DE HARDWARE DEL SERVIDOR DEBE NOTIFICARSE PREVIAMENTE PARA DAR RENOVAR LA LICENCIA.
		LA LICENCIA ES UNICA POR SERVIDOR.
		SE REQUIERE INTERNET EN EL SERVIDOR A INSTALAR EL ERP.
	*/
	PRIMARY KEY (EMPRESA),

	/**CAMPOS DE AUDITORIA**/
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()), 
	CREADO_POR VARCHAR(50) NOT NULL DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) NOT NULL DEFAULT (SUSER_NAME())
	/**FIN CAMPOS DE AUDITORIA**/
)
GO

--TRIGGER DE AUDITORIA
CREATE TRIGGER TRIGGER_AUDIT_SERVIDOR ON CONFIG.SERVIDOR
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM CONFIG.SERVIDOR T INNER JOIN INSERTED I ON T.EMPRESA = I.EMPRESA
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM CONFIG.SERVIDOR T INNER JOIN DELETED D ON T.EMPRESA = D.EMPRESA	
END
GO

PRINT 'TABLA SERVIDOR GENERADA CORRECTAMENTE!!!';
GO

--******************* TABLA EMPRESA ***************************
PRINT 'CREANDO TABLA EMPRESA...';
GO

CREATE TABLE CONFIG.EMPRESA(
	EMPRESA VARCHAR(50) NOT NULL, --CODIGO O NOMBRE DE LA COMPAÑIA(NOMBRE DEL SCHEMA EN LA BASE DE DATOS)
	NOMBRE VARCHAR(100) NOT NULL, --NOMBRE DE LA EMPRESA
	LICENCIA VARCHAR(300) NULL, --LA LICENCIA ES UNICA POR CADA EMPRESA QUE EL CLIENTE DESEE CONFIGURAR EN SU SERVIDOR
	LOGO IMAGE NULL,
	DIRECCION VARCHAR(100) NULL,
	CONTRIBUYENTE VARCHAR(20) NULL, --NUMERO RUC DE LA EMPRESA

	PRIMARY KEY (EMPRESA),

	/**CAMPOS DE AUDITORIA**/
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()), 
	CREADO_POR VARCHAR(50) NOT NULL DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) NOT NULL DEFAULT (SUSER_NAME())
	/**FIN CAMPOS DE AUDITORIA**/
)
GO

--TRIGGER DE AUDITORIA
CREATE TRIGGER TRIGGER_AUDIT_EMPRESA ON CONFIG.EMPRESA
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM CONFIG.EMPRESA T INNER JOIN INSERTED I ON T.EMPRESA = I.EMPRESA
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM CONFIG.EMPRESA T INNER JOIN DELETED D ON T.EMPRESA = D.EMPRESA	
END
GO

PRINT 'TABLA EMPRESA GENERADA CORRECTAMENTE!!!';
GO

--******************* TABLA USUARIO ***************************
PRINT 'CREANDO TABLA USUARIO...';
GO

CREATE TABLE CONFIG.USUARIO(
	USUARIO VARCHAR(20) NOT NULL, --CODIGO UNICO DE USUARIO
	USUARIO_WINDOWS VARCHAR(50) NULL, --USUARIO DE WINDOWS, EN EL SISTEMA SE VERIFICARA QUE NO SE REPITA ANTES DE GUARDAR CAMBIOS(SOLO FUNCIONA CON USUARIOS DE DOMINIO)
	NOMBRE VARCHAR(100) NOT NULL UNIQUE, --CAMPO UNICO PARA EVITAR ESCRIBIR NOMBRES REPETIDOS DE USUARIOS Y/O GRUPOS
	TIPO VARCHAR(1) NOT NULL DEFAULT('U'), --U = USUARIO, G = GRUPO
	ACTIVO VARCHAR(1) NOT NULL DEFAULT('S'),
	DIAS_EXPIRA_CLAVE INT NOT NULL DEFAULT 0, --INDICA SI SE REQUIERE CAMBIAR LA CLAVE CADA X DIAS (SI DIAS_EXPIRA_CLAVE ES CERO O USUARIO_WINDOWS ES DISTINTO DE NULL INDICA QUE NO REQUIERE CAMBIO DE CLAVE)
	FECHA_ULTIMA_CLAVE DATE NOT NULL DEFAULT (GETDATE()), --INDICA LA FECHA EN LA CUAL SE REALIZO EL ULTIMO CAMBIO DE CLAVE
	CLAVE VARCHAR(100) NOT NULL,
	
	PRIMARY KEY (USUARIO),

	/**CAMPOS DE AUDITORIA**/
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) NOT NULL DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50)NOT NULL DEFAULT (SUSER_NAME())
	/**FIN DE CAMPOS DE AUDITORIA**/
)
GO


CREATE TRIGGER TRIGGER_AUDIT_USUARIO ON CONFIG.USUARIO 
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM CONFIG.USUARIO T INNER JOIN INSERTED I ON T.USUARIO = I.USUARIO;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM CONFIG.USUARIO T INNER JOIN DELETED D ON T.USUARIO = D.USUARIO;
END
GO


CREATE TRIGGER TRIGGER_AUDIT_DELETE_USUARIO ON CONFIG.USUARIO 
FOR DELETE
AS BEGIN
	IF UPPER((SELECT USUARIO FROM DELETED WHERE USUARIO = 'ADMIN')) = 'ADMIN'
	BEGIN
		RAISERROR('ERROR: NO PUEDE ELIMINAR EL USUARIO ADMIN PORQUE ES EL ADMINISTRADOR DEL SISTEMA', 16, 1);
		ROLLBACK;
	END
END
GO

PRINT 'TABLA USUARIO GENERADA CORRECTAMENTE!!!';
GO

--******************* TABLA USUARIO_GRUPO ***************************
PRINT 'CREANDO TABLA USUARIO_GRUPO...';
GO

CREATE TABLE CONFIG.USUARIO_GRUPO(
	USUARIO VARCHAR(20) NOT NULL,
	GRUPO VARCHAR(20) NOT NULL,

	PRIMARY KEY (USUARIO, GRUPO),

	/**CAMPOS DE AUDITORIA*/
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) NOT NULL DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) NOT NULL DEFAULT (SUSER_NAME())
	/**FIN DE CAMPOS DE AUDITORIA**/
)
GO

CREATE TRIGGER TRIGGER_AUDIT_USUARIO_GRUPO ON CONFIG.USUARIO_GRUPO
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM CONFIG.USUARIO_GRUPO T INNER JOIN INSERTED I ON T.USUARIO = I.USUARIO AND T.GRUPO = I.GRUPO;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM CONFIG.USUARIO_GRUPO T INNER JOIN DELETED D ON T.USUARIO = D.USUARIO AND T.GRUPO = D.GRUPO;
END
GO

PRINT 'TABLA USUARIO_GRUPO GENERADA CORRECTAMENTE!!!';
GO

--******************* TABLA MODULO ***************************
PRINT 'CREANDO TABLA MODULO...';
GO

CREATE TABLE CONFIG.MODULO(
	MODULO VARCHAR(5) NOT NULL,
	DESCRIPCION VARCHAR(100) NOT NULL UNIQUE,
    [VERSION] VARCHAR(8) NOT NULL DEFAULT '00.00.00', --FORMATO: VERSION_MAYOR.VERSION_MENOR.REVISION
	ESTADO VARCHAR(1) NOT NULL DEFAULT 'A', --N = NORMAL, A = ACTUALIZANDO, I = INACTIVO
	
	PRIMARY KEY(MODULO),

	/**CAMPOS DE AUDITORIA**/
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) NOT NULL DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) NOT NULL DEFAULT (SUSER_NAME())
	/**FIN CAMPOS DE AUDITORIA**/
)
GO


CREATE TRIGGER TRIGGER_AUDIT_MODULO ON CONFIG.MODULO
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM CONFIG.MODULO T INNER JOIN INSERTED I ON T.MODULO = I.MODULO;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM CONFIG.MODULO T INNER JOIN DELETED D ON T.MODULO = D.MODULO;
END
GO

PRINT 'TABLA MODULO CREADA!!!';
GO

--******************* TABLA MODULO_OPCION ***************************
PRINT 'CREANDO TABLA MODULO_OPCION...';
GO

CREATE TABLE CONFIG.MODULO_OPCION(
	MODULO VARCHAR(5) NOT NULL,
	OPCION VARCHAR(100) NOT NULL,
	NIVEL INT NOT NULL DEFAULT 1, --INDICA EL NIVEL DE LA OPCION EN EL MODULO (ESTILO ARBOL)
	ORDEN INT NOT NULL DEFAULT 1, --INDICA EL ORDEN EN QUE SE ENCUENTRA LA OPCION DENTRO DEL MODULO Y NIVEL (EL ORDEN PARA PRESENTAR LAS OPCIONES)	

	PRIMARY KEY (MODULO, OPCION),
	FOREIGN KEY (MODULO) REFERENCES CONFIG.MODULO (MODULO) ON UPDATE CASCADE,

	/*CAMPOS DE AUDITORIA*/
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) NOT NULL DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) NOT NULL DEFAULT (SUSER_NAME()),
	/*FIN DE CAMPOS DE AUDITORIA*/
) 
GO


CREATE TRIGGER TRIGGER_AUDIT_MODULO_OPCION ON CONFIG.MODULO_OPCION 
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM CONFIG.MODULO_OPCION T INNER JOIN INSERTED I ON T.MODULO = I.MODULO AND T.OPCION = I.OPCION;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM CONFIG.MODULO_OPCION T INNER JOIN DELETED D ON T.MODULO = D.MODULO AND T.OPCION = D.OPCION;
END
GO

PRINT 'TABLA MODULO_OPCION CREADA!!!';
GO

--******************* TABLA PRIVILEGIOS ***************************
PRINT 'CREANDO TABLA PRIVILEGIOS...';
GO

CREATE TABLE CONFIG.PRIVILEGIO(
	EMPRESA VARCHAR(50) NOT NULL,
	MODULO VARCHAR(5) NOT NULL,
	OPCION VARCHAR(100) NOT NULL,
	USUARIO VARCHAR(20) NOT NULL,
	PERMISO VARCHAR(1) NOT NULL,--L = LECTURA, E = LECTURA/ESCRITURA, SI NO EXISTE EL REGISTRO O PERMISO ES NULL TAMBIEN SE CONSIDERA BLOQUEADO

	PRIMARY KEY (EMPRESA, MODULO, OPCION, USUARIO),
	FOREIGN KEY (EMPRESA) REFERENCES CONFIG.EMPRESA (EMPRESA),
	FOREIGN KEY (USUARIO) REFERENCES CONFIG.USUARIO (USUARIO),
	FOREIGN KEY (MODULO, OPCION) REFERENCES CONFIG.MODULO_OPCION (MODULO, OPCION),

	/**CAMPOS DE AUDITORIA**/
	FECHA_CREADO DATETIME NOT NULL DEFAULT (GETDATE()),
	CREADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	FECHA_MODIFICADO DATETIME NOT NULL DEFAULT (GETDATE()),
	MODIFICADO_POR VARCHAR(50) DEFAULT (SUSER_NAME()),
	/**FIN DE CAMPOS DE AUDITORIA**/
)
GO

CREATE TRIGGER TRIGGER_AUDIT_PRIVILEGIO ON CONFIG.PRIVILEGIO
FOR INSERT, UPDATE
AS BEGIN
	DECLARE @INSERT VARCHAR(1)

	--VERIFICAR SI SE ESTA REALIZANDO UNA INSERCION DE REGISTROS NUEVOS
	SET @INSERT = CASE WHEN EXISTS ( SELECT 1 FROM deleted ) THEN 0 ELSE 1 END

	IF @INSERT = 1
		IF @INSERT = 1
		UPDATE T
		SET T.CREADO_POR = SUSER_NAME(), T.FECHA_CREADO = GETDATE(),
			T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE()
		FROM CONFIG.PRIVILEGIO T INNER JOIN INSERTED I ON T.MODULO = I.MODULO AND T.OPCION = I.OPCION AND T.USUARIO = I.USUARIO;
	ELSE
		UPDATE T
		SET T.MODIFICADO_POR = SUSER_NAME(), T.FECHA_MODIFICADO = GETDATE(),
			T.CREADO_POR = D.CREADO_POR, T.FECHA_CREADO = D.FECHA_CREADO
		FROM CONFIG.PRIVILEGIO T INNER JOIN DELETED D ON T.MODULO = D.MODULO AND T.OPCION = D.OPCION AND T.USUARIO = D.USUARIO;
END
GO

PRINT 'TABLA PRIVILEGIOS CREADA!!!';
GO

/****************** FUNCIONES VARIAS ************************************************/
--FUNCION REDONDEAR
CREATE FUNCTION CONFIG.REDONDEAR( @NUMERO DECIMAL(28,8)) RETURNS DECIMAL(28,8)
AS BEGIN
	DECLARE @NUM DECIMAL(28,8), @FACTOR_REDONDEO DECIMAL(28,8)

	SET @NUM = ROUND(@NUMERO, 3)
	SET @FACTOR_REDONDEO = 0.05

	RETURN CASE WHEN (@NUM % @FACTOR_REDONDEO) > 0 
		 THEN @NUM + (@FACTOR_REDONDEO - (@NUM % @FACTOR_REDONDEO))
		 ELSE @NUM END
	
END
GO